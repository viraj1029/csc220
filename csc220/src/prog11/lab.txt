0. Create package prog11.  Install the Java files.

1. Run ChainedHashTable.  It should run, but removes won't happen.

2. Study put carefully and ask questions if you don't understand it.

3. Implement remove using the comments provided.  Test.

4. Now implement rehash.  Test.

5. Run OpenHashTable.  It won't run.  Study the documentation for
   find.  Make sure you understand what it does and why.  Study the
   put and remove methods.  Ask questions.

6. Implement find.  Test.

7. Implement rehash.  Change DEFAULT_CAPACITY to 5.  Test.

8. Modify OpenHashTable to have an int variable called nonNull which
   is the number of non-null entries in the table: either a Node or
   DELETED.  Modify the rule for rehashing to be that if at least half
   the entries are non-null, then rehash with a new table length four
   times size.

9. Test your hash table implementations with Jumble.

10. Implement EntryIterator in ChainedHashTable.  When you finish, the
    special loop in main should work.

11. Ditto OpenHashTable.

12. Modify Jumble so that it keeps a list of words that match each
    pattern: Map<String, List<String>>.

13. Add a second loop that prompts the user for a set of clue letters
    and the length of the first pun word.

    a. Sort the letters (sorted).

    b. For each key (sorted1) that has the right length:

       i. Create a StringBuilder (sb).

       ii. For each letter in sorted, if it matches the current
           position in sorted1, increment the current position.
           Otherwise, add that letter to sb.

    c. If all the letters in sorted1 were found in sorted, create a
       string (sorted2) from sb.  Look up both sorted1 and sorted2.



      
