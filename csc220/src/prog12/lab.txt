0. Create package prog12 and install the four Java files.


1. Examine the Browser and Google interfaces.  Write the Javadoc style
   comments for the Browser methods and make sure it looks good in
   Javadoc.  Read the Javadoc description of the Google interface and
   make sure you understand it.


2. Create your MyGoogle class which implements the Google interface.
   First create empty implementations of gather and search.  search
   can return a new String[0] for now.

   In MyGoogle, create private variables allURLs, url2index, and
   refCounts, as described in the notes.

   Then initialize them.  Add comments to describe them.


3. Create a method indexURL(String url) which modifies the three
   variables above to index a new url.  It's just one line for
   each, but you need to understand what's going on to figure out the
   line.

4. Next, create private variables to store allWords, word2index, and
   urlIndexLists.  Initialize them.  Comments!


5. Create a method indexWord(String word) which modifies the three
   variables to index the new word.


HOMEWORK

DUE 17 April:  Implement gather.

6. I strongly suggest you start your gather loop like this:

  int count = 0;
  while (!urlQueue.isEmpty() && count++ < 100) {
  	String url = urlQueue.poll();
	System.out.println(url);

  This way you will see each URL as it is processed and your program
  won't take forever.


DUE 24 April:  Implement search.

7. First, create a Page class which stores a page index and its number
   of references.  This class should implement Comparable<Page>,
   meaning you can compare two Page objects.  The compareTo method
   should order Page objects by increasing number of references.  So
   what should it return?  Hint: What does
   "Victor".compareTo("Vincent") return and why?


8. In search, you need three variables

    // Iterator into list of page ids for each key word.
    Iterator<Integer>[] pageIndexIterators =
      (Iterator<Integer>[]) new Iterator[keyWords.size()];
    
    // Current page index in each list, just ``behind'' the iterator.
    int[] currentPageIndices;
    
    // LEAST popular page is at top of heap so if heap has more
    // than numResults elements, the least popular page can be
    // thrown away.
    PriorityQueue<Page> bestPageIndices;

   I have shown you how to initialize the first one because it is a
   bit tricky.

   Write a loop to initialize the entries of pageIndexIterators.  If any
   of the words do not have an index ("sqrglwtzs"), what should you do?
    

9. Implement the following methods

  /** Look through currentPageIndices for all the smallest elements.  For
      each smallest element currentPageIndices[i], load the next element
      from pageIndexIterators[i].  If pageIndexIterators[i] does not have a
      next element, return false.  Otherwise, return true.
      @param currentPageIndices array of current page indices
      @param pageIndexIterators array of iterators with next page indices
      @return true if all minimum page indices updates, false otherwise
  */
  private boolean updateSmallest
    (int[] currentPageIndices, Iterator<Integer>[] pageIndexIterators) {


  /** Check if all elements in an array are equal.
      @param array an array of numbers
      @return true if all are equal, false otherwise
  */
  private boolean allEqual (int[] array) {

10. Implement the loop of search.  While updateSmallest is successful,
    check if the entries of currentPageIndices are all equal.  If so, you
    have a found a match, so save it in the queue.


11. Create an array of String which will hold the results.  How big
    should it be?

    Unload the priority queue into the string.  But polling the queue
    gives you the pages in reverse order from least significant to
    most significant.  What should you do?

    Also, the queue is giving you Page objects.  How do you get the URLs?

